name: Terraform Infrastructure CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  ACR_LOGIN_SERVER: ${{ secrets.ARM_LOGIN_SERVER }}

jobs:
  terraform:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      # Checkout do repositório
      - name: Checkout code
        uses: actions/checkout@v3

      # Configuração do Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.9.6

      # Inicializa o Terraform
      - name: Terraform Init
        run: terraform init

      - name: Terraform Import Resources
        run: terraform import azurerm_resource_group.rg /subscriptions/${{ env.ARM_SUBSCRIPTION_ID }}/resourceGroups/MyResourceGroup || true 
     
      - name: Import AKS Cluster
        run: terraform import azurerm_kubernetes_cluster.aks /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/MyResourceGroup/providers/Microsoft.ContainerService/managedClusters/myAKSCluster || true
        
      - name: Import ACR
        run: terraform import azurerm_container_registry.acr /subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/MyResourceGroup/providers/Microsoft.ContainerRegistry/registries/myContainerRegistryTechChallenge || true

      # Valida o código Terraform
      - name: Terraform Validate
        run: terraform validate

      # Executa o Terraform Plan para ver as mudanças
      - name: Terraform Plan
        run: terraform plan

      # Aplica as mudanças do Terraform com aprovação automática
      - name: Terraform Apply
        run: terraform apply -auto-approve

  update-kubernetes:
    runs-on: ubuntu-latest
    needs: terraform  # Esta etapa só é executada se o Terraform aplicar com sucesso

    steps:
      # Checkout do repositório para garantir que os manifests de Kubernetes estão disponíveis
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Obter credenciais do AKS
      - name: Get AKS Credentials
        run: az aks get-credentials --resource-group MyResourceGroup --name myAKSCluster --overwrite-existing

      # Aplicar ConfigMap e Secret
      - name: Apply ConfigMap and Secret
        run: |
          kubectl apply -f configmap-api.yaml
          kubectl apply -f secret-api.yaml

      # Aplicar deployment e service para o store-db
      - name: Apply Store API Deployment and Service
        run: |
          kubectl apply -f deployment-store-api.yaml
          kubectl apply -f svc-store-api.yaml

      # Aplicar deployment e service para o store-api
      - name: Apply Payment API Deployment and Service
        run: |
          kubectl apply -f deployment-store-apipayment.yaml
          kubectl apply -f svc-store-apipayment.yaml

      # Atualizar a imagem da Store API
      - name: Update Store API Deployment
        run: |
          kubectl set image deployment/api api=${{ env.ACR_LOGIN_SERVER }}/store:dev --namespace default
          kubectl rollout status deployment/api --namespace default --timeout=60s

      # Atualizar a imagem da Payment API
      - name: Update Payment API Deployment
        run: |
          kubectl set image deployment/apipayment apipayment=${{ env.ACR_LOGIN_SERVER }}/payment:dev --namespace default
          kubectl rollout status deployment/apipayment --namespace default --timeout=60s

      # Aplicar HPA
      - name: Apply Horizontal Pod Autoscaler
        run: kubectl apply -f hpa-api.yaml
